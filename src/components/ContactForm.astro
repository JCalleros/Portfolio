---
const props = Astro.props as Record<string, never>;
---
<div class="grid gap-6 md:grid-cols-[1.1fr_1fr]">
  <aside class="card p-6">
    <h3 class="text-lg font-semibold">Let‚Äôs build something great</h3>
    <p class="mt-2 opacity-90 text-sm/6">
      Tell me briefly about your project, timeline, and goals. I‚Äôll reply within 1‚Äì2 business days.
    </p>

    <ul class="mt-4 space-y-2 text-sm/6 opacity-90">
      <li class="flex items-center gap-2">
        <span class="inline-grid place-items-center size-7 rounded-full bg-white/10">‚úâÔ∏è</span>
        jcalleros1009@gmail.com
      </li>
      <li class="flex items-center gap-2">
        <span class="inline-grid place-items-center size-7 rounded-full bg-white/10">üåé</span>
        Based in Mexico ‚Ä¢ Remote-friendly
      </li>
      <li class="flex items-center gap-2">
        <span class="inline-grid place-items-center size-7 rounded-full bg-white/10">‚è±Ô∏è</span>
        Typical response: <strong>24‚Äì48h</strong>
      </li>
    </ul>
  </aside>

  <form id="contact-form" method="post" action="/api/contact" class="card p-6 space-y-4" novalidate>
    <input type="hidden" name="_hp" value="">
    <input type="hidden" name="_ts" value="">

    <div>
      <label class="block text-sm mb-1" for="name">Name</label>
      <div class="relative">
        <span class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 opacity-70">üë§</span>
        <input id="name" name="name" required minlength="2" maxlength="100" autocomplete="name"
          class="w-full rounded-md bg-white/5 px-9 py-2 ring-1 ring-white/10 focus:ring-2 focus:ring-[--color-accent]"
          placeholder="Your name" />
      </div>
      <p id="err-name" class="mt-1 text-xs text-red-300 hidden"></p>
    </div>

    <div>
      <label class="block text-sm mb-1" for="email">Email</label>
      <div class="relative">
        <span class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 opacity-70">üìß</span>
        <input id="email" name="email" type="email" required autocomplete="email"
          class="w-full rounded-md bg-white/5 px-9 py-2 ring-1 ring-white/10 focus:ring-2 focus:ring-[--color-accent]"
          placeholder="you@company.com" />
      </div>
      <p id="err-email" class="mt-1 text-xs text-red-300 hidden"></p>
    </div>

    <div>
      <label class="block text-sm mb-1" for="message">Message</label>
      <div class="relative">
        <span class="pointer-events-none absolute left-3 top-3 opacity-70">üí¨</span>
        <textarea id="message" name="message" rows="6" required minlength="10" maxlength="5000" autocomplete="off"
          class="w-full rounded-md bg-white/5 px-9 py-2 ring-1 ring-white/10 focus:ring-2 focus:ring-[--color-accent]"
          placeholder="Tell me about your project, goals, and timelines."></textarea>
      </div>
      <p id="err-message" class="mt-1 text-xs text-red-300 hidden"></p>
    </div>

    <div class="flex items-center justify-between gap-3">
      <p class="text-xs opacity-70">Protected with honeypot & time-check. No CAPTCHA needed.</p>
      <button class="btn btn-primary" id="send-btn" type="submit">
        <span class="inline-flex items-center gap-2">
          <svg class="size-4" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M3 6l18 6-18 6 6-6-6-6z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
          </svg>
          Send
        </span>
      </button>
    </div>

    <div id="form-alert" class="hidden rounded-md border px-3 py-2 text-sm" role="status" aria-live="polite"></div>
  </form>
</div>

<script>
  const form = document.getElementById("contact-form");
  const alertBox = document.getElementById("form-alert");
  const btn = document.getElementById("send-btn");
  const ts = form.querySelector('input[name="_ts"]');
  ts.value = Date.now().toString();

  const errName = document.getElementById("err-name");
  const errEmail = document.getElementById("err-email");
  const errMessage = document.getElementById("err-message");

  function setAlert(kind, msg) {
    alertBox.className =
      "rounded-md border px-3 py-2 text-sm " +
      (kind === "ok"
        ? "border-emerald-400/40 bg-emerald-400/10 text-emerald-200"
        : "border-red-400/40 bg-red-400/10 text-red-200");
    alertBox.textContent = msg;
    alertBox.classList.remove("hidden");
  }

  function clearFieldErrors() {
    [errName, errEmail, errMessage].forEach(el => { el.textContent = ""; el.classList.add("hidden"); });
  }

  function validateClient() {
    clearFieldErrors();
    let ok = true;
    const name = (document.getElementById("name")).value.trim();
    const email = (document.getElementById("email")).value.trim();
    const message = (document.getElementById("message")).value.trim();

    if (name.length < 2) { errName.textContent = "Name must be at least 2 characters"; errName.classList.remove("hidden"); ok = false; }
    if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) { errEmail.textContent = "Please enter a valid email"; errEmail.classList.remove("hidden"); ok = false; }
    if (message.length < 10) { errMessage.textContent = "Message must be at least 10 characters"; errMessage.classList.remove("hidden"); ok = false; }

    return ok;
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    alertBox.classList.add("hidden");
    if (!validateClient()) return;

    const fd = new FormData(form);
    const lock = () => {
      btn.disabled = true;
      btn.dataset._old = btn.innerHTML;
      btn.innerHTML = '<span class="inline-flex items-center gap-2"><svg class="size-4 animate-spin" viewBox="0 0 24 24"><circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="3" fill="none" opacity=".25"/><path d="M21 12a9 9 0 0 1-9 9" stroke="currentColor" stroke-width="3" fill="none"/></svg> Sending‚Ä¶</span>';
    };
    const unlock = () => {
      btn.disabled = false;
      btn.innerHTML = btn.dataset._old || "Send";
    };

    lock();
    try {
      const res = await fetch(form.action, { method: "POST", body: fd });
      const json = await res.json().catch(() => ({}));

      if (!res.ok) {
        if (json && json.code === "invalid_input" && json.issues) {
          const { fieldErrors = {} } = json.issues;
          if (fieldErrors.name?.length) { errName.textContent = fieldErrors.name[0]; errName.classList.remove("hidden"); }
          if (fieldErrors.email?.length) { errEmail.textContent = fieldErrors.email[0]; errEmail.classList.remove("hidden"); }
          if (fieldErrors.message?.length) { errMessage.textContent = fieldErrors.message[0]; errMessage.classList.remove("hidden"); }
          setAlert("err", "Please fix the highlighted fields.");
          return;
        }
        const msg =
          json?.code === "send_failed" ? "Email service error‚Äîplease try again later." :
          json?.code === "server_error" ? "Server error‚Äîplease try again." :
          "Sorry‚Äîthere was a problem. Please try again.";
        setAlert("err", msg);
        return;
      }

      if (json?.ignored === "honeypot" || json?.ignored === "too_fast") {
        ts.value = Date.now().toString();
        setAlert("ok", "Thanks! Your message has been sent.");
        form.reset();
        return;
      }

      if (json?.ok) {
        setAlert("ok", "Thanks! Your message has been sent.");
        form.reset();
        ts.value = Date.now().toString();
      } else {
        setAlert("err", "Sorry‚Äîthere was a problem. Please try again.");
      }
    } catch {
      setAlert("err", "Network error‚Äîplease try again.");
    } finally {
      unlock();
    }
  });
</script>
