---
import Base from "../../layouts/Base.astro";
import Nav from "../../components/Nav.astro";
import ScrollProgress from "../../components/ScrollProgress.astro";
import FX from "../../components/FX.astro";
import ProjectGalleryCard from "../../components/ProjectGalleryCard.astro";
import projects from "../../data/projects";

const allTags = Array.from(
  new Set(
    projects.flatMap((p: any) => (p.tags || []).map((t: string) => t.toLowerCase()))
  )
).sort();

const featured = projects[0];
const rest = projects.slice(1);
---
<Base>
  <a id="top"></a>
  <Nav />
  <ScrollProgress />
  <FX />

  <!-- Featured hero -->
  <section class="section" data-bg="projects">
    <header class="mb-6 reveal" data-reveal>
      <h1 class="text-3xl md:text-4xl font-bold tracking-tight">Case studies</h1>
      <p class="mt-2 opacity-90">Deep dives into selected projects: goals, stack, and outcomes.</p>
    </header>

    {featured && (
      <a href={`/projects/${featured.slug}`} class="block reveal" data-reveal aria-label={`Open ${featured.title}`}>
        <article class="card overflow-hidden">
          <div class="grid gap-0 md:grid-cols-[1.2fr_1fr]">
            <figure class="relative aspect-[16/10] md:aspect-auto bg-white/5">
              <img src={featured.image} alt="" class="absolute inset-0 h-full w-full object-contain p-3" loading="eager" decoding="async" />
            </figure>
            <div class="p-6 md:p-8 flex flex-col">
              <h2 class="text-2xl font-semibold">{featured.title}</h2>
              <p class="mt-2 opacity-90">{featured.summary}</p>
              <div class="mt-3 flex flex-wrap gap-2">
                {(featured.tags || []).slice(0, 6).map((t: string) => <span class="tag">{t}</span>)}
              </div>
              <div class="mt-auto pt-4">
                <span class="btn btn-ghost">Read case study â†’</span>
              </div>
            </div>
          </div>
        </article>
      </a>
    )}
  </section>

  <!-- Filter/search -->
  <section class="section pt-0" data-bg="projects">
    <div class="card p-4 md:p-5 reveal" data-reveal>
      <div class="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
        <div class="flex items-center gap-2">
          <label for="search" class="text-sm opacity-80">Search</label>
          <input id="search" type="search" placeholder="Title or summary"
            class="rounded-md bg-white/5 px-3 py-2 text-sm ring-1 ring-white/10 focus:ring-2 focus:ring-[--color-accent] w-64 max-w-full" />
        </div>
        <div class="flex flex-wrap gap-2" id="tagbar">
          {allTags.map((t) => (
            <button type="button" class="tag hover:ring-1 hover:ring-white/30" data-tag={t} aria-pressed="false">{t}</button>
          ))}
        </div>
      </div>
    </div>

    <!-- Gallery -->
    <div id="gallery" class="mt-6 grid grid-cols-1 items-stretch gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {rest.map((p: any) => (
        <ProjectGalleryCard {...p} />
      ))}
    </div>
  </section>

  <script>
    // Simple client-side filter (tags + search)
    const gallery = document.getElementById("gallery");
    const cards = [...gallery.querySelectorAll("[data-tags]")];
    const tagbar = document.getElementById("tagbar");
    const search = document.getElementById("search");

    let activeTags = new Set();
    let q = "";

    const apply = () => {
      const query = q.trim().toLowerCase();
      cards.forEach((el) => {
        const tags = el.getAttribute("data-tags") || "";
        const text = (el.textContent || "").toLowerCase();
        const tagOk = activeTags.size === 0 || [...activeTags].every(t => tags.includes(t));
        const textOk = !query || text.includes(query);
        el.classList.toggle("hidden", !(tagOk && textOk));
      });
    };

    tagbar.addEventListener("click", (e) => {
      const b = e.target.closest("[data-tag]");
      if (!b) return;
      const key = b.getAttribute("data-tag");
      const on = b.getAttribute("aria-pressed") === "true";
      b.setAttribute("aria-pressed", String(!on));
      b.classList.toggle("ring-1");
      b.classList.toggle("ring-white/40");
      b.classList.toggle("bg-white/15");
      if (on) activeTags.delete(key); else activeTags.add(key);
      apply();
    });

    search.addEventListener("input", (e) => {
      q = e.target.value;
      apply();
    });
  </script>
</Base>
